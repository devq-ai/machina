version: "3.8"

services:
  # Stripe MCP Service
  stripe-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: stripe-mcp
    command: ["python", "-m", "mcp_implementations.stripe_mcp"]
    environment:
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - MCP_SERVICE_NAME=stripe-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8001:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Shopify MCP Service
  shopify-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: shopify-mcp
    command: ["python", "-m", "mcp_implementations.shopify_dev_mcp"]
    environment:
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
      - SHOPIFY_SHOP_DOMAIN=${SHOPIFY_SHOP_DOMAIN}
      - MCP_SERVICE_NAME=shopify-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8002:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Darwin MCP Service (Genetic Algorithms)
  darwin-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: darwin-mcp
    command: ["python", "-m", "mcp_implementations.darwin_mcp_production"]
    environment:
      - MCP_SERVICE_NAME=darwin-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8003:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Docker MCP Service
  docker-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: docker-mcp
    command: ["python", "-m", "mcp_implementations.docker_mcp_production"]
    environment:
      - MCP_SERVICE_NAME=docker-mcp
      - LOG_LEVEL=INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8004:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # FastMCP Service
  fastmcp-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: fastmcp-mcp
    command: ["python", "-m", "mcp_implementations.fastmcp_mcp_production"]
    environment:
      - MCP_SERVICE_NAME=fastmcp-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8005:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Bayes MCP Service
  bayes-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: bayes-mcp
    command: ["python", "-m", "mcp_implementations.bayes_mcp"]
    environment:
      - MCP_SERVICE_NAME=bayes-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8006:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Upstash MCP Service
  upstash-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: upstash-mcp
    command: ["python", "-m", "mcp_implementations.upstash_mcp_production"]
    environment:
      - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}
      - UPSTASH_REDIS_REST_TOKEN=${UPSTASH_REDIS_REST_TOKEN}
      - UPSTASH_VECTOR_REST_URL=${UPSTASH_VECTOR_REST_URL}
      - UPSTASH_VECTOR_REST_TOKEN=${UPSTASH_VECTOR_REST_TOKEN}
      - MCP_SERVICE_NAME=upstash-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8007:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Calendar MCP Service
  calendar-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: calendar-mcp
    command: ["python", "-m", "mcp_implementations.calendar_mcp_production"]
    environment:
      - GOOGLE_CALENDAR_CREDENTIALS=${GOOGLE_CALENDAR_CREDENTIALS}
      - MCP_SERVICE_NAME=calendar-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8008:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Gmail MCP Service
  gmail-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: gmail-mcp
    command: ["python", "-m", "mcp_implementations.gmail_mcp_production"]
    environment:
      - GOOGLE_GMAIL_CREDENTIALS=${GOOGLE_GMAIL_CREDENTIALS}
      - MCP_SERVICE_NAME=gmail-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8009:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # GCP MCP Service
  gcp-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: gcp-mcp
    command: ["python", "-m", "mcp_implementations.gcp_mcp_production"]
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/configs/gcp-credentials.json
      - MCP_SERVICE_NAME=gcp-mcp
      - LOG_LEVEL=INFO
    volumes:
      - ../../configs/gcp-credentials.json:/app/configs/gcp-credentials.json:ro
    ports:
      - "8010:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # GitHub MCP Service
  github-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: github-mcp
    command: ["python", "-m", "mcp_implementations.github_mcp_production"]
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - MCP_SERVICE_NAME=github-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8011:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Memory MCP Service
  memory-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: memory-mcp
    command: ["python", "-m", "mcp_implementations.memory_mcp_production"]
    environment:
      - MCP_SERVICE_NAME=memory-mcp
      - LOG_LEVEL=INFO
      - MEMORY_STORAGE_PATH=/app/data/memory
    volumes:
      - memory-data:/app/data/memory
    ports:
      - "8012:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Logfire MCP Service
  logfire-mcp:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: logfire-mcp
    command: ["python", "-m", "mcp_implementations.logfire_mcp_production"]
    environment:
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN}
      - MCP_SERVICE_NAME=logfire-mcp
      - LOG_LEVEL=INFO
    ports:
      - "8013:8000"
    networks:
      - mcp-network
    restart: unless-stopped

  # Supporting Services
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - mcp-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    environment:
      - POSTGRES_USER=mcp
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mcp_password}
      - POSTGRES_DB=mcp_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge

volumes:
  memory-data:
  redis-data:
  postgres-data:
