#!/usr/bin/env python3
"""
Task Master MCP Server
Generated by DevQ.ai
"""

import asyncio
import json
from typing import Dict, Any, List, Optional
from fastapi import FastAPI
import mcp.types as types
from mcp.server import Server, NotificationOptions
from mcp.server.models import InitializationOptions
import mcp.server.stdio
from src.tools import get_tools, handle_tool_call

app = FastAPI()

@app.post("/tools/call")
async def call_tool(tool_call: Dict[str, Any]):
    return await handle_tool_call(tool_call["name"], tool_call["arguments"])

class TaskMasterMCPServer:
    """Main MCP server implementation"""

    def __init__(self):
        self.server = Server("task-master")

        @self.server.list_tools()
        async def handle_list_tools() -> List[types.Tool]:
            return get_tools()

        @self.server.call_tool()
        async def handle_call_tool(name: str, arguments: Optional[Dict[str, Any]] = None) -> List[types.TextContent]:
            result = await handle_tool_call(name, arguments or {})
            return [types.TextContent(type="text", text=json.dumps(result, indent=2))]

    async def run(self):
        """Run the MCP server"""
        async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
            await self.server.run(
                read_stream,
                write_stream,
                InitializationOptions(
                    server_name="task-master",
                    server_version="1.0.0",
                    capabilities=self.server.get_capabilities(
                        notification_options=NotificationOptions(),
                        experimental_capabilities={},
                    ),
                ),
            )


async def main():
    server = TaskMasterMCPServer()
    await server.run()


if __name__ == "__main__":
    asyncio.run(main())
