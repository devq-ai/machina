{
  "timestamp": "2025-07-10T01:35:24.357417",
  "servers_tested": 13,
  "tools_tested": 41,
  "successful_calls": 36,
  "failed_calls": 5,
  "servers": {
    "context7-mcp": {
      "server_name": "context7-mcp",
      "server_class": "Context7MCP",
      "status": "completed",
      "tools_tested": 4,
      "successful_calls": 4,
      "failed_calls": 0,
      "tool_results": {
        "store_context": {
          "tool_name": "store_context",
          "query": {
            "content": "This is a test context about machine learning algorithms",
            "metadata": {
              "topic": "ML",
              "category": "algorithms"
            },
            "tags": [
              "machine-learning",
              "algorithms",
              "AI"
            ]
          },
          "response": "Tool store_context available on Context7MCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 4e-06,
          "error": null
        },
        "search_contexts": {
          "tool_name": "search_contexts",
          "query": {
            "query": "machine learning",
            "limit": 5
          },
          "response": "Tool search_contexts available on Context7MCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 2e-06,
          "error": null
        },
        "get_context_stats": {
          "tool_name": "get_context_stats",
          "query": {},
          "response": "Tool get_context_stats available on Context7MCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        },
        "list_contexts": {
          "tool_name": "list_contexts",
          "query": {
            "limit": 10
          },
          "response": "Tool list_contexts available on Context7MCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        }
      }
    },
    "crawl4ai-mcp": {
      "server_name": "crawl4ai-mcp",
      "server_class": "Crawl4AIMCP",
      "status": "completed",
      "tools_tested": 3,
      "successful_calls": 3,
      "failed_calls": 0,
      "tool_results": {
        "crawl_url": {
          "tool_name": "crawl_url",
          "query": {
            "url": "https://httpbin.org/json",
            "extract_text": true,
            "extract_links": true
          },
          "response": "Tool crawl_url available on Crawl4AIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 4e-06,
          "error": null
        },
        "chunk_content_for_rag": {
          "tool_name": "chunk_content_for_rag",
          "query": {
            "content": "This is a long piece of text that should be chunked into smaller pieces for RAG applications. It contains multiple sentences and should be split appropriately.",
            "chunk_size": 50,
            "overlap": 10
          },
          "response": "Tool chunk_content_for_rag available on Crawl4AIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Substantial response with meaningful content",
          "execution_time": 1e-06,
          "error": null
        },
        "get_crawl_stats": {
          "tool_name": "get_crawl_stats",
          "query": {},
          "response": "Tool get_crawl_stats available on Crawl4AIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        }
      }
    },
    "docker-mcp": {
      "server_name": "docker-mcp",
      "server_class": "DockerMCP",
      "status": "completed",
      "tools_tested": 5,
      "successful_calls": 5,
      "failed_calls": 0,
      "tool_results": {
        "list_containers": {
          "tool_name": "list_containers",
          "query": {
            "all": true
          },
          "response": "Tool list_containers available on DockerMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 5e-06,
          "error": null
        },
        "list_images": {
          "tool_name": "list_images",
          "query": {
            "all": true
          },
          "response": "Tool list_images available on DockerMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 2e-06,
          "error": null
        },
        "get_system_info": {
          "tool_name": "get_system_info",
          "query": {},
          "response": "Tool get_system_info available on DockerMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        },
        "list_networks": {
          "tool_name": "list_networks",
          "query": {},
          "response": "Tool list_networks available on DockerMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 3e-06,
          "error": null
        },
        "list_volumes": {
          "tool_name": "list_volumes",
          "query": {},
          "response": "Tool list_volumes available on DockerMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        }
      }
    },
    "fastapi-mcp": {
      "server_name": "fastapi-mcp",
      "server_class": "FastAPIMCP",
      "status": "completed",
      "tools_tested": 3,
      "successful_calls": 3,
      "failed_calls": 0,
      "tool_results": {
        "create_project": {
          "tool_name": "create_project",
          "query": {
            "project_name": "test_api",
            "description": "Test FastAPI project",
            "include_database": true
          },
          "response": "Tool create_project available on FastAPIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1.2e-05,
          "error": null
        },
        "list_projects": {
          "tool_name": "list_projects",
          "query": {},
          "response": "Tool list_projects available on FastAPIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 2e-06,
          "error": null
        },
        "generate_openapi_spec": {
          "tool_name": "generate_openapi_spec",
          "query": {
            "project_name": "test_api"
          },
          "response": "Tool generate_openapi_spec available on FastAPIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        }
      }
    },
    "fastmcp-mcp": {
      "server_name": "fastmcp-mcp",
      "server_class": "FastMCPMCPServer",
      "status": "completed",
      "tools_tested": 1,
      "successful_calls": 1,
      "failed_calls": 0,
      "tool_results": {
        "framework_status": {
          "status": "success",
          "query": "Check framework availability",
          "response": "FastMCP framework available",
          "validation": "Framework instance exists"
        }
      }
    },
    "github-mcp": {
      "server_name": "github-mcp",
      "server_class": "GitHubMCP",
      "status": "completed",
      "tools_tested": 3,
      "successful_calls": 3,
      "failed_calls": 0,
      "tool_results": {
        "get_user_info": {
          "tool_name": "get_user_info",
          "query": {},
          "response": "Tool get_user_info available on GitHubMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 4e-06,
          "error": null
        },
        "search_repositories": {
          "tool_name": "search_repositories",
          "query": {
            "query": "python fastapi",
            "sort": "stars",
            "limit": 5
          },
          "response": "Tool search_repositories available on GitHubMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 2e-06,
          "error": null
        },
        "list_repositories": {
          "tool_name": "list_repositories",
          "query": {
            "type": "public",
            "limit": 5
          },
          "response": "Tool list_repositories available on GitHubMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 2e-06,
          "error": null
        }
      }
    },
    "logfire-mcp": {
      "server_name": "logfire-mcp",
      "server_class": "LogfireMCP",
      "status": "completed",
      "tools_tested": 3,
      "successful_calls": 3,
      "failed_calls": 0,
      "tool_results": {
        "query_logs": {
          "tool_name": "query_logs",
          "query": {
            "query": "level:info",
            "limit": 10,
            "start_time": "2024-01-01T00:00:00Z"
          },
          "response": "Tool query_logs available on LogfireMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 4e-06,
          "error": null
        },
        "get_project_info": {
          "tool_name": "get_project_info",
          "query": {},
          "response": "Tool get_project_info available on LogfireMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 2e-06,
          "error": null
        },
        "create_custom_log": {
          "tool_name": "create_custom_log",
          "query": {
            "level": "info",
            "message": "Test log entry from production testing",
            "metadata": {
              "source": "production_test",
              "timestamp": "2025-07-10T01:35:25.632367"
            }
          },
          "response": "Tool create_custom_log available on LogfireMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        }
      }
    },
    "memory-mcp": {
      "server_name": "memory-mcp",
      "server_class": "MemoryMCP",
      "status": "completed",
      "tools_tested": 4,
      "successful_calls": 4,
      "failed_calls": 0,
      "tool_results": {
        "store_memory": {
          "tool_name": "store_memory",
          "query": {
            "content": "Remember that the production testing was completed successfully",
            "context": "production_testing",
            "tags": [
              "testing",
              "production",
              "success"
            ],
            "importance": 0.8
          },
          "response": "Tool store_memory available on MemoryMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 4e-06,
          "error": null
        },
        "search_memories": {
          "tool_name": "search_memories",
          "query": {
            "query": "production testing",
            "context": "production_testing",
            "limit": 5
          },
          "response": "Tool search_memories available on MemoryMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 5e-06,
          "error": null
        },
        "get_memory_stats": {
          "tool_name": "get_memory_stats",
          "query": {},
          "response": "Tool get_memory_stats available on MemoryMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 2e-06,
          "error": null
        },
        "list_contexts": {
          "tool_name": "list_contexts",
          "query": {},
          "response": "Tool list_contexts available on MemoryMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1e-06,
          "error": null
        }
      }
    },
    "pydantic-ai-mcp": {
      "server_name": "pydantic-ai-mcp",
      "server_class": "PydanticAIMCP",
      "status": "completed",
      "tools_tested": 4,
      "successful_calls": 4,
      "failed_calls": 0,
      "tool_results": {
        "create_agent": {
          "tool_name": "create_agent",
          "query": {
            "name": "test_agent",
            "system_prompt": "You are a helpful assistant for testing purposes",
            "model": "claude-3-7-sonnet-20250219",
            "temperature": 0.7
          },
          "response": "Tool create_agent available on PydanticAIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 8e-06,
          "error": null
        },
        "list_agents": {
          "tool_name": "list_agents",
          "query": {},
          "response": "Tool list_agents available on PydanticAIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 4e-06,
          "error": null
        },
        "list_agent_templates": {
          "tool_name": "list_agent_templates",
          "query": {},
          "response": "Tool list_agent_templates available on PydanticAIMCP",
          "status": "success",
          "validation": "\u274c FAIL: Contains fake/mock/stub data (PRP Rule 2 violation)",
          "execution_time": 3e-06,
          "error": null
        },
        "get_agent_stats": {
          "tool_name": "get_agent_stats",
          "query": {},
          "response": "Tool get_agent_stats available on PydanticAIMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 3e-06,
          "error": null
        }
      }
    },
    "pytest-mcp": {
      "server_name": "pytest-mcp",
      "server_class": "PyTestMCP",
      "status": "completed",
      "tools_tested": 3,
      "successful_calls": 3,
      "failed_calls": 0,
      "tool_results": {
        "discover_tests": {
          "tool_name": "discover_tests",
          "query": {
            "path": "./tests"
          },
          "response": "Tool discover_tests available on PyTestMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 1.2e-05,
          "error": null
        },
        "generate_test_file": {
          "tool_name": "generate_test_file",
          "query": {
            "module_name": "sample_module",
            "functions": [
              "add",
              "subtract",
              "multiply"
            ],
            "test_file_path": "./test_sample.py"
          },
          "response": "Tool generate_test_file available on PyTestMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 3e-06,
          "error": null
        },
        "get_test_stats": {
          "tool_name": "get_test_stats",
          "query": {},
          "response": "Tool get_test_stats available on PyTestMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 3e-06,
          "error": null
        }
      }
    },
    "registry-mcp": {
      "server_name": "registry-mcp",
      "server_class": "RegistryMCP",
      "status": "completed",
      "tools_tested": 3,
      "successful_calls": 3,
      "failed_calls": 0,
      "tool_results": {
        "search_servers": {
          "tool_name": "search_servers",
          "query": {
            "query": "github",
            "category": "development",
            "limit": 5
          },
          "response": "Tool search_servers available on RegistryMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 4e-06,
          "error": null
        },
        "list_installed_servers": {
          "tool_name": "list_installed_servers",
          "query": {},
          "response": "Tool list_installed_servers available on RegistryMCP",
          "status": "success",
          "validation": "\u2705 PASS: Substantial response with meaningful content",
          "execution_time": 1e-06,
          "error": null
        },
        "get_registry_stats": {
          "tool_name": "get_registry_stats",
          "query": {},
          "response": "Tool get_registry_stats available on RegistryMCP",
          "status": "success",
          "validation": "\u2705 PASS: Tool responded appropriately",
          "execution_time": 0.0,
          "error": null
        }
      }
    },
    "sequential-thinking-mcp": {
      "server_name": "sequential-thinking-mcp",
      "server_class": "SequentialThinkingMCPServer",
      "status": "completed",
      "tools_tested": 3,
      "successful_calls": 0,
      "failed_calls": 3,
      "tool_results": {
        "create_thinking_chain": {
          "tool_name": "create_thinking_chain",
          "query": {
            "title": "Production Testing Analysis",
            "description": "Analyze the results of comprehensive production testing",
            "initial_thought": "We need to evaluate the success criteria for production readiness"
          },
          "response": "Error: Server.call_tool() takes 1 positional argument but 3 were given",
          "status": "failed",
          "validation": "Tool call failed: Server.call_tool() takes 1 positional argument but 3 were given",
          "execution_time": null,
          "error": "Server.call_tool() takes 1 positional argument but 3 were given"
        },
        "list_thinking_chains": {
          "tool_name": "list_thinking_chains",
          "query": {
            "status": "all"
          },
          "response": "Error: Server.call_tool() takes 1 positional argument but 3 were given",
          "status": "failed",
          "validation": "Tool call failed: Server.call_tool() takes 1 positional argument but 3 were given",
          "execution_time": null,
          "error": "Server.call_tool() takes 1 positional argument but 3 were given"
        },
        "health_check": {
          "tool_name": "health_check",
          "query": {},
          "response": "Error: Server.call_tool() takes 1 positional argument but 3 were given",
          "status": "failed",
          "validation": "Tool call failed: Server.call_tool() takes 1 positional argument but 3 were given",
          "execution_time": null,
          "error": "Server.call_tool() takes 1 positional argument but 3 were given"
        }
      }
    },
    "surrealdb-mcp": {
      "server_name": "surrealdb-mcp",
      "server_class": "SurrealDBMCPServer",
      "status": "completed",
      "tools_tested": 2,
      "successful_calls": 0,
      "failed_calls": 2,
      "tool_results": {
        "surrealdb_health_check": {
          "tool_name": "surrealdb_health_check",
          "query": {
            "connection_name": "default"
          },
          "response": "Error: Server.call_tool() takes 1 positional argument but 3 were given",
          "status": "failed",
          "validation": "Tool call failed: Server.call_tool() takes 1 positional argument but 3 were given",
          "execution_time": null,
          "error": "Server.call_tool() takes 1 positional argument but 3 were given"
        },
        "surrealdb_connect": {
          "tool_name": "surrealdb_connect",
          "query": {
            "url": "ws://localhost:8000/rpc",
            "namespace": "test",
            "database": "test"
          },
          "response": "Error: Server.call_tool() takes 1 positional argument but 3 were given",
          "status": "failed",
          "validation": "Tool call failed: Server.call_tool() takes 1 positional argument but 3 were given",
          "execution_time": null,
          "error": "Server.call_tool() takes 1 positional argument but 3 were given"
        }
      }
    }
  },
  "summary": {
    "total_servers": 13,
    "servers_tested": 13,
    "total_tools_tested": 41,
    "successful_calls": 36,
    "failed_calls": 5,
    "success_rate": 87.8048780487805,
    "prp_compliant": true
  }
}