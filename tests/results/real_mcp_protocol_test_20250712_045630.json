{
  "test_type": "live_mcp_protocol_only",
  "timestamp": "2025-07-12T04:56:30.126722",
  "total_servers": 13,
  "successful_initializations": 13,
  "servers_with_tools_capability": 13,
  "servers_with_working_tools_list": 13,
  "results": [
    {
      "server_name": "surrealdb_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/surrealdb_mcp.py",
      "timestamp": "2025-07-12T04:56:19.498057",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "surrealdb-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "surrealdb_health_check",
              "description": "Check SurrealDB connectivity and database status.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "execute_sql_query",
              "description": "Execute a custom SurrealDB SQL query.",
              "inputSchema": {
                "properties": {
                  "query": {
                    "title": "Query",
                    "type": "string"
                  },
                  "params": {
                    "anyOf": [
                      {
                        "additionalProperties": true,
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Params"
                  }
                },
                "required": [
                  "query"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "create_record",
              "description": "Create a new record in a SurrealDB table.",
              "inputSchema": {
                "properties": {
                  "table": {
                    "title": "Table",
                    "type": "string"
                  },
                  "data": {
                    "additionalProperties": true,
                    "title": "Data",
                    "type": "object"
                  },
                  "record_id": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Record Id"
                  }
                },
                "required": [
                  "table",
                  "data"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "select_records",
              "description": "Select records from a SurrealDB table.",
              "inputSchema": {
                "properties": {
                  "table": {
                    "title": "Table",
                    "type": "string"
                  },
                  "where_clause": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Where Clause"
                  },
                  "limit": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Limit"
                  },
                  "order_by": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Order By"
                  }
                },
                "required": [
                  "table"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "update_record",
              "description": "Update a record in a SurrealDB table.",
              "inputSchema": {
                "properties": {
                  "table": {
                    "title": "Table",
                    "type": "string"
                  },
                  "record_id": {
                    "title": "Record Id",
                    "type": "string"
                  },
                  "data": {
                    "additionalProperties": true,
                    "title": "Data",
                    "type": "object"
                  }
                },
                "required": [
                  "table",
                  "record_id",
                  "data"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "delete_record",
              "description": "Delete a record from a SurrealDB table.",
              "inputSchema": {
                "properties": {
                  "table": {
                    "title": "Table",
                    "type": "string"
                  },
                  "record_id": {
                    "title": "Record Id",
                    "type": "string"
                  }
                },
                "required": [
                  "table",
                  "record_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "create_graph_relation",
              "description": "Create a graph relationship between two records.",
              "inputSchema": {
                "properties": {
                  "from_table": {
                    "title": "From Table",
                    "type": "string"
                  },
                  "from_id": {
                    "title": "From Id",
                    "type": "string"
                  },
                  "relation_type": {
                    "title": "Relation Type",
                    "type": "string"
                  },
                  "to_table": {
                    "title": "To Table",
                    "type": "string"
                  },
                  "to_id": {
                    "title": "To Id",
                    "type": "string"
                  },
                  "properties": {
                    "anyOf": [
                      {
                        "additionalProperties": true,
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Properties"
                  }
                },
                "required": [
                  "from_table",
                  "from_id",
                  "relation_type",
                  "to_table",
                  "to_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "vector_search",
              "description": "Perform vector similarity search.",
              "inputSchema": {
                "properties": {
                  "table": {
                    "title": "Table",
                    "type": "string"
                  },
                  "vector_field": {
                    "title": "Vector Field",
                    "type": "string"
                  },
                  "query_vector": {
                    "items": {
                      "type": "number"
                    },
                    "title": "Query Vector",
                    "type": "array"
                  },
                  "limit": {
                    "default": 10,
                    "title": "Limit",
                    "type": "integer"
                  },
                  "threshold": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Threshold"
                  }
                },
                "required": [
                  "table",
                  "vector_field",
                  "query_vector"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "get_database_schema",
              "description": "Get the database schema information.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "count_records",
              "description": "Count records in a table with optional filter.",
              "inputSchema": {
                "properties": {
                  "table": {
                    "title": "Table",
                    "type": "string"
                  },
                  "where_clause": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Where Clause"
                  }
                },
                "required": [
                  "table"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 814.1500949859619
    },
    {
      "server_name": "sequential_thinking_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/sequential_thinking_mcp.py",
      "timestamp": "2025-07-12T04:56:20.312569",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "sequential-thinking-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "thinking_health_check",
              "description": "Check sequential thinking engine health.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "create_thinking_workflow",
              "description": "Create a new sequential thinking workflow.",
              "inputSchema": {
                "properties": {
                  "problem": {
                    "title": "Problem",
                    "type": "string"
                  },
                  "reasoning_mode": {
                    "default": "critical",
                    "title": "Reasoning Mode",
                    "type": "string"
                  },
                  "workflow_id": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Workflow Id"
                  }
                },
                "required": [
                  "problem"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "add_thinking_step",
              "description": "Add a thinking step to a workflow.",
              "inputSchema": {
                "properties": {
                  "workflow_id": {
                    "title": "Workflow Id",
                    "type": "string"
                  },
                  "step_type": {
                    "title": "Step Type",
                    "type": "string"
                  },
                  "content": {
                    "title": "Content",
                    "type": "string"
                  },
                  "reasoning": {
                    "title": "Reasoning",
                    "type": "string"
                  },
                  "confidence": {
                    "default": 0.5,
                    "title": "Confidence",
                    "type": "number"
                  },
                  "dependencies": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Dependencies"
                  },
                  "step_id": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Step Id"
                  }
                },
                "required": [
                  "workflow_id",
                  "step_type",
                  "content",
                  "reasoning"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "execute_thinking_step",
              "description": "Execute a specific thinking step.",
              "inputSchema": {
                "properties": {
                  "workflow_id": {
                    "title": "Workflow Id",
                    "type": "string"
                  },
                  "step_id": {
                    "title": "Step Id",
                    "type": "string"
                  }
                },
                "required": [
                  "workflow_id",
                  "step_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "get_workflow_status",
              "description": "Get the status of a thinking workflow.",
              "inputSchema": {
                "properties": {
                  "workflow_id": {
                    "title": "Workflow Id",
                    "type": "string"
                  }
                },
                "required": [
                  "workflow_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "analyze_problem",
              "description": "Analyze a problem and optionally generate thinking steps.",
              "inputSchema": {
                "properties": {
                  "problem": {
                    "title": "Problem",
                    "type": "string"
                  },
                  "reasoning_mode": {
                    "default": "critical",
                    "title": "Reasoning Mode",
                    "type": "string"
                  },
                  "auto_generate_steps": {
                    "default": true,
                    "title": "Auto Generate Steps",
                    "type": "boolean"
                  }
                },
                "required": [
                  "problem"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "execute_workflow",
              "description": "Execute all steps in a thinking workflow.",
              "inputSchema": {
                "properties": {
                  "workflow_id": {
                    "title": "Workflow Id",
                    "type": "string"
                  }
                },
                "required": [
                  "workflow_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_workflows",
              "description": "List all thinking workflows.",
              "inputSchema": {
                "properties": {
                  "include_completed": {
                    "default": false,
                    "title": "Include Completed",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "get_reasoning_templates",
              "description": "Get templates for different reasoning modes.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 826.7028331756592
    },
    {
      "server_name": "registry_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/registry_mcp.py",
      "timestamp": "2025-07-12T04:56:21.139439",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "registry-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "registry_health_check",
              "description": "Check registry health and return status.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_servers",
              "description": "List all registered MCP servers with optional filtering.",
              "inputSchema": {
                "properties": {
                  "filter_by": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Filter By"
                  },
                  "filter_value": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Filter Value"
                  }
                },
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "get_server_info",
              "description": "Get detailed information about a specific server.",
              "inputSchema": {
                "properties": {
                  "filename": {
                    "title": "Filename",
                    "type": "string"
                  }
                },
                "required": [
                  "filename"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "get_production_servers",
              "description": "Get all servers marked as required in production.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "get_server_status",
              "description": "Get comprehensive server status and statistics.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "search_servers",
              "description": "Search servers by filename, description, or repository.",
              "inputSchema": {
                "properties": {
                  "query": {
                    "title": "Query",
                    "type": "string"
                  }
                },
                "required": [
                  "query"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "validate_registry",
              "description": "Validate registry data for consistency and completeness.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "get_framework_stats",
              "description": "Get statistics about framework distribution.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 861.4342212677002
    },
    {
      "server_name": "server_template",
      "server_file": "/Users/dionedge/devqai/machina/src/server_template.py",
      "timestamp": "2025-07-12T04:56:22.001093",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "template-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "health_check",
              "description": "Check server health and return status.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "get_server_info",
              "description": "Get detailed server information.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "echo_message",
              "description": "Echo a message the specified number of times.",
              "inputSchema": {
                "properties": {
                  "message": {
                    "title": "Message",
                    "type": "string"
                  },
                  "count": {
                    "default": 1,
                    "title": "Count",
                    "type": "integer"
                  }
                },
                "required": [
                  "message"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "list_capabilities",
              "description": "List all available server capabilities.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "test_error_handling",
              "description": "Test error handling capabilities.",
              "inputSchema": {
                "properties": {
                  "should_error": {
                    "default": false,
                    "title": "Should Error",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 796.8509197235107
    },
    {
      "server_name": "docker_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/docker_mcp.py",
      "timestamp": "2025-07-12T04:56:22.798276",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "docker-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "docker_health_check",
              "description": "Check Docker daemon health and connectivity.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_containers",
              "description": "List Docker containers.",
              "inputSchema": {
                "properties": {
                  "all_containers": {
                    "default": false,
                    "title": "All Containers",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "container_info",
              "description": "Get detailed information about a specific container.",
              "inputSchema": {
                "properties": {
                  "container_id": {
                    "title": "Container Id",
                    "type": "string"
                  }
                },
                "required": [
                  "container_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "start_container",
              "description": "Start a Docker container.",
              "inputSchema": {
                "properties": {
                  "container_id": {
                    "title": "Container Id",
                    "type": "string"
                  }
                },
                "required": [
                  "container_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "stop_container",
              "description": "Stop a Docker container.",
              "inputSchema": {
                "properties": {
                  "container_id": {
                    "title": "Container Id",
                    "type": "string"
                  },
                  "timeout": {
                    "default": 10,
                    "title": "Timeout",
                    "type": "integer"
                  }
                },
                "required": [
                  "container_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_images",
              "description": "List Docker images.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "container_logs",
              "description": "Get logs from a Docker container.",
              "inputSchema": {
                "properties": {
                  "container_id": {
                    "title": "Container Id",
                    "type": "string"
                  },
                  "lines": {
                    "default": 100,
                    "title": "Lines",
                    "type": "integer"
                  }
                },
                "required": [
                  "container_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 803.7681579589844
    },
    {
      "server_name": "github_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/github_mcp.py",
      "timestamp": "2025-07-12T04:56:23.602549",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "github-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "github_health_check",
              "description": "Check GitHub API connectivity and authentication.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_repositories",
              "description": "List repositories for an organization or user.",
              "inputSchema": {
                "properties": {
                  "org": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Org"
                  },
                  "user": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "User"
                  },
                  "type": {
                    "default": "all",
                    "title": "Type",
                    "type": "string"
                  },
                  "sort": {
                    "default": "updated",
                    "title": "Sort",
                    "type": "string"
                  },
                  "per_page": {
                    "default": 30,
                    "title": "Per Page",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "get_repository",
              "description": "Get detailed information about a repository.",
              "inputSchema": {
                "properties": {
                  "repo": {
                    "title": "Repo",
                    "type": "string"
                  },
                  "owner": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Owner"
                  }
                },
                "required": [
                  "repo"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_issues",
              "description": "List issues for a repository.",
              "inputSchema": {
                "properties": {
                  "repo": {
                    "title": "Repo",
                    "type": "string"
                  },
                  "owner": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Owner"
                  },
                  "state": {
                    "default": "open",
                    "title": "State",
                    "type": "string"
                  },
                  "labels": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Labels"
                  },
                  "assignee": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Assignee"
                  },
                  "per_page": {
                    "default": 30,
                    "title": "Per Page",
                    "type": "integer"
                  }
                },
                "required": [
                  "repo"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "create_issue",
              "description": "Create a new issue in a repository.",
              "inputSchema": {
                "properties": {
                  "repo": {
                    "title": "Repo",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title",
                    "type": "string"
                  },
                  "body": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Body"
                  },
                  "assignees": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Assignees"
                  },
                  "labels": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Labels"
                  },
                  "owner": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Owner"
                  }
                },
                "required": [
                  "repo",
                  "title"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_pull_requests",
              "description": "List pull requests for a repository.",
              "inputSchema": {
                "properties": {
                  "repo": {
                    "title": "Repo",
                    "type": "string"
                  },
                  "owner": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Owner"
                  },
                  "state": {
                    "default": "open",
                    "title": "State",
                    "type": "string"
                  },
                  "base": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Base"
                  },
                  "head": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Head"
                  },
                  "per_page": {
                    "default": 30,
                    "title": "Per Page",
                    "type": "integer"
                  }
                },
                "required": [
                  "repo"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 829.4188976287842
    },
    {
      "server_name": "crawl4ai_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/crawl4ai_mcp.py",
      "timestamp": "2025-07-12T04:56:24.432296",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "crawl4ai-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "crawl_url",
              "description": "Crawl a URL and extract content.",
              "inputSchema": {
                "properties": {
                  "url": {
                    "title": "Url",
                    "type": "string"
                  },
                  "extract_text": {
                    "default": true,
                    "title": "Extract Text",
                    "type": "boolean"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "extract_content",
              "description": "Extract specific content from a webpage using CSS selectors.",
              "inputSchema": {
                "properties": {
                  "url": {
                    "title": "Url",
                    "type": "string"
                  },
                  "selector": {
                    "default": "body",
                    "title": "Selector",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "batch_crawl",
              "description": "Crawl multiple URLs in batch.",
              "inputSchema": {
                "properties": {
                  "urls": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Urls",
                    "type": "array"
                  }
                },
                "required": [
                  "urls"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "analyze_website",
              "description": "Analyze website structure and content.",
              "inputSchema": {
                "properties": {
                  "url": {
                    "title": "Url",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 862.2398376464844
    },
    {
      "server_name": "fastmcp_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/fastmcp_mcp.py",
      "timestamp": "2025-07-12T04:56:25.294967",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "fastmcp-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "fastmcp_health_check",
              "description": "Check FastMCP framework health and installation.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "generate_fastmcp_server",
              "description": "Generate a FastMCP server template with specified tools.",
              "inputSchema": {
                "properties": {
                  "server_name": {
                    "title": "Server Name",
                    "type": "string"
                  },
                  "tools": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Tools",
                    "type": "array"
                  },
                  "include_logfire": {
                    "default": true,
                    "title": "Include Logfire",
                    "type": "boolean"
                  },
                  "include_startup_handlers": {
                    "default": true,
                    "title": "Include Startup Handlers",
                    "type": "boolean"
                  }
                },
                "required": [
                  "server_name",
                  "tools"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "test_fastmcp_server",
              "description": "Test a FastMCP server by importing and analyzing its tools.",
              "inputSchema": {
                "properties": {
                  "server_file": {
                    "title": "Server File",
                    "type": "string"
                  }
                },
                "required": [
                  "server_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "create_fastmcp_tool",
              "description": "Generate a FastMCP tool function.",
              "inputSchema": {
                "properties": {
                  "tool_name": {
                    "title": "Tool Name",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "title": "Parameters",
                    "type": "object"
                  },
                  "return_type": {
                    "default": "str",
                    "title": "Return Type",
                    "type": "string"
                  },
                  "include_logfire": {
                    "default": true,
                    "title": "Include Logfire",
                    "type": "boolean"
                  },
                  "include_error_handling": {
                    "default": true,
                    "title": "Include Error Handling",
                    "type": "boolean"
                  }
                },
                "required": [
                  "tool_name",
                  "parameters"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "validate_fastmcp_server",
              "description": "Validate a FastMCP server for common issues and best practices.",
              "inputSchema": {
                "properties": {
                  "server_file": {
                    "title": "Server File",
                    "type": "string"
                  }
                },
                "required": [
                  "server_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_fastmcp_servers",
              "description": "List all FastMCP servers in the src directory.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 791.8438911437988
    },
    {
      "server_name": "logfire_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/logfire_mcp.py",
      "timestamp": "2025-07-12T04:56:26.087267",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "logfire-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "send_log",
              "description": "Send a log entry to Logfire.",
              "inputSchema": {
                "properties": {
                  "level": {
                    "title": "Level",
                    "type": "string"
                  },
                  "message": {
                    "title": "Message",
                    "type": "string"
                  },
                  "extra_data": {
                    "additionalProperties": true,
                    "default": null,
                    "title": "Extra Data",
                    "type": "object"
                  }
                },
                "required": [
                  "level",
                  "message"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "create_span",
              "description": "Create a new span in Logfire.",
              "inputSchema": {
                "properties": {
                  "name": {
                    "title": "Name",
                    "type": "string"
                  },
                  "operation": {
                    "default": "custom",
                    "title": "Operation",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "log_metric",
              "description": "Log a metric to Logfire.",
              "inputSchema": {
                "properties": {
                  "metric_name": {
                    "title": "Metric Name",
                    "type": "string"
                  },
                  "value": {
                    "title": "Value",
                    "type": "number"
                  },
                  "unit": {
                    "default": "count",
                    "title": "Unit",
                    "type": "string"
                  }
                },
                "required": [
                  "metric_name",
                  "value"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "health_check",
              "description": "Check Logfire connection health.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 779.2892456054688
    },
    {
      "server_name": "memory_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/memory_mcp.py",
      "timestamp": "2025-07-12T04:56:26.866715",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "memory-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "memory_health_check",
              "description": "Check memory database health and return statistics.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "store_memory",
              "description": "Store a new memory in the database.",
              "inputSchema": {
                "properties": {
                  "content": {
                    "title": "Content",
                    "type": "string"
                  },
                  "context": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Context"
                  },
                  "tags": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Tags"
                  },
                  "importance": {
                    "default": 5,
                    "title": "Importance",
                    "type": "integer"
                  },
                  "expires_at": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Expires At"
                  }
                },
                "required": [
                  "content"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "search_memories",
              "description": "Search memories by content, context, or tags.",
              "inputSchema": {
                "properties": {
                  "query": {
                    "title": "Query",
                    "type": "string"
                  },
                  "context": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Context"
                  },
                  "tags": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Tags"
                  },
                  "limit": {
                    "default": 10,
                    "title": "Limit",
                    "type": "integer"
                  }
                },
                "required": [
                  "query"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "get_memory",
              "description": "Get a specific memory by ID.",
              "inputSchema": {
                "properties": {
                  "memory_id": {
                    "title": "Memory Id",
                    "type": "string"
                  }
                },
                "required": [
                  "memory_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "update_memory",
              "description": "Update an existing memory.",
              "inputSchema": {
                "properties": {
                  "memory_id": {
                    "title": "Memory Id",
                    "type": "string"
                  },
                  "content": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Content"
                  },
                  "context": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Context"
                  },
                  "tags": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Tags"
                  },
                  "importance": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Importance"
                  }
                },
                "required": [
                  "memory_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "delete_memory",
              "description": "Delete a memory from the database.",
              "inputSchema": {
                "properties": {
                  "memory_id": {
                    "title": "Memory Id",
                    "type": "string"
                  }
                },
                "required": [
                  "memory_id"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_contexts",
              "description": "List all unique contexts in the memory database.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "cleanup_expired_memories",
              "description": "Remove expired memories from the database.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 793.7359809875488
    },
    {
      "server_name": "pytest_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/pytest_mcp.py",
      "timestamp": "2025-07-12T04:56:27.660755",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "pytest-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "pytest_health_check",
              "description": "Check pytest environment health and configuration.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "run_tests",
              "description": "Run pytest tests with optional coverage.",
              "inputSchema": {
                "properties": {
                  "test_path": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Test Path"
                  },
                  "verbose": {
                    "default": true,
                    "title": "Verbose",
                    "type": "boolean"
                  },
                  "coverage": {
                    "default": true,
                    "title": "Coverage",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "generate_test",
              "description": "Generate a test file for a given module.",
              "inputSchema": {
                "properties": {
                  "module_name": {
                    "title": "Module Name",
                    "type": "string"
                  },
                  "test_functions": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Test Functions"
                  },
                  "include_coverage": {
                    "default": true,
                    "title": "Include Coverage",
                    "type": "boolean"
                  }
                },
                "required": [
                  "module_name"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "get_coverage",
              "description": "Analyze test coverage from coverage file.",
              "inputSchema": {
                "properties": {
                  "coverage_file": {
                    "default": ".coverage",
                    "title": "Coverage File",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "run_specific_test",
              "description": "Run a specific test file or function.",
              "inputSchema": {
                "properties": {
                  "test_file": {
                    "title": "Test File",
                    "type": "string"
                  },
                  "test_function": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Test Function"
                  },
                  "markers": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Markers"
                  }
                },
                "required": [
                  "test_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_test_files",
              "description": "List all test files in the project.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Result",
                    "type": "array"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "validate_test_structure",
              "description": "Validate project test structure and configuration.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 853.900671005249
    },
    {
      "server_name": "fastapi_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/fastapi_mcp.py",
      "timestamp": "2025-07-12T04:56:28.515026",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "fastapi-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "fastapi_health_check",
              "description": "Check FastAPI development environment health.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "generate_fastapi_app",
              "description": "Generate a basic FastAPI application template.",
              "inputSchema": {
                "properties": {
                  "app_name": {
                    "title": "App Name",
                    "type": "string"
                  },
                  "include_cors": {
                    "default": true,
                    "title": "Include Cors",
                    "type": "boolean"
                  },
                  "include_middleware": {
                    "default": true,
                    "title": "Include Middleware",
                    "type": "boolean"
                  },
                  "include_docs": {
                    "default": true,
                    "title": "Include Docs",
                    "type": "boolean"
                  }
                },
                "required": [
                  "app_name"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "create_pydantic_model",
              "description": "Generate a Pydantic model with specified fields.",
              "inputSchema": {
                "properties": {
                  "model_name": {
                    "title": "Model Name",
                    "type": "string"
                  },
                  "fields": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "title": "Fields",
                    "type": "object"
                  },
                  "include_validators": {
                    "default": false,
                    "title": "Include Validators",
                    "type": "boolean"
                  }
                },
                "required": [
                  "model_name",
                  "fields"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "generate_openapi_spec",
              "description": "Generate OpenAPI specification from a FastAPI app.",
              "inputSchema": {
                "properties": {
                  "app_file": {
                    "title": "App File",
                    "type": "string"
                  }
                },
                "required": [
                  "app_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "run_fastapi_server",
              "description": "Start a FastAPI development server.",
              "inputSchema": {
                "properties": {
                  "app_file": {
                    "title": "App File",
                    "type": "string"
                  },
                  "host": {
                    "default": "127.0.0.1",
                    "title": "Host",
                    "type": "string"
                  },
                  "port": {
                    "default": 8000,
                    "title": "Port",
                    "type": "integer"
                  },
                  "reload": {
                    "default": true,
                    "title": "Reload",
                    "type": "boolean"
                  }
                },
                "required": [
                  "app_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "validate_fastapi_app",
              "description": "Validate a FastAPI application for common issues.",
              "inputSchema": {
                "properties": {
                  "app_file": {
                    "title": "App File",
                    "type": "string"
                  }
                },
                "required": [
                  "app_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 812.5848770141602
    },
    {
      "server_name": "pydantic_ai_mcp",
      "server_file": "/Users/dionedge/devqai/machina/src/pydantic_ai_mcp.py",
      "timestamp": "2025-07-12T04:56:29.327951",
      "mcp_protocol_test": true,
      "process_started": true,
      "initialize_response": {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
          "protocolVersion": "2025-06-18",
          "capabilities": {
            "experimental": {},
            "prompts": {
              "listChanged": false
            },
            "resources": {
              "subscribe": false,
              "listChanged": false
            },
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "pydantic-ai-mcp",
            "version": "1.10.1"
          }
        }
      },
      "tools_list_response": {
        "jsonrpc": "2.0",
        "id": 2,
        "result": {
          "tools": [
            {
              "name": "pydantic_ai_health_check",
              "description": "Check Pydantic AI environment health and configuration.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "create_pydantic_agent",
              "description": "Create a Pydantic AI agent with specified configuration.",
              "inputSchema": {
                "properties": {
                  "agent_name": {
                    "title": "Agent Name",
                    "type": "string"
                  },
                  "system_prompt": {
                    "title": "System Prompt",
                    "type": "string"
                  },
                  "model": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Model"
                  },
                  "include_logfire": {
                    "default": true,
                    "title": "Include Logfire",
                    "type": "boolean"
                  },
                  "tools": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "title": "Tools"
                  }
                },
                "required": [
                  "agent_name",
                  "system_prompt"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "test_pydantic_agent",
              "description": "Test a Pydantic AI agent by running it with a test query.",
              "inputSchema": {
                "properties": {
                  "agent_file": {
                    "title": "Agent File",
                    "type": "string"
                  },
                  "test_query": {
                    "default": "Hello World",
                    "title": "Test Query",
                    "type": "string"
                  }
                },
                "required": [
                  "agent_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            },
            {
              "name": "list_agent_models",
              "description": "List available models for Pydantic AI agents.",
              "inputSchema": {
                "properties": {},
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              }
            },
            {
              "name": "create_agent_workflow",
              "description": "Create a multi-agent workflow with specified coordination strategy.",
              "inputSchema": {
                "properties": {
                  "workflow_name": {
                    "title": "Workflow Name",
                    "type": "string"
                  },
                  "agents": {
                    "items": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "title": "Agents",
                    "type": "array"
                  },
                  "coordination_strategy": {
                    "default": "sequential",
                    "title": "Coordination Strategy",
                    "type": "string"
                  }
                },
                "required": [
                  "workflow_name",
                  "agents"
                ],
                "type": "object"
              },
              "outputSchema": {
                "properties": {
                  "result": {
                    "title": "Result",
                    "type": "string"
                  }
                },
                "required": [
                  "result"
                ],
                "title": "_WrappedResult",
                "type": "object",
                "x-fastmcp-wrap-result": true
              }
            },
            {
              "name": "validate_pydantic_agent",
              "description": "Validate a Pydantic AI agent for common issues and best practices.",
              "inputSchema": {
                "properties": {
                  "agent_file": {
                    "title": "Agent File",
                    "type": "string"
                  }
                },
                "required": [
                  "agent_file"
                ],
                "type": "object"
              },
              "outputSchema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          ]
        }
      },
      "error": null,
      "performance_ms": 798.4418869018555
    }
  ]
}